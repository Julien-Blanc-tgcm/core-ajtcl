import os
import platform

Import('env')

if platform.system() == 'Linux' and os.path.exists('/usr/src/gtest'):
    # Use the googletest from the system package as a default if it is installed.
    default_gtest_dir = '/usr'
else:
    default_gtest_dir = None

vars = Variables()
vars.Add(PathVariable('GTEST_DIR', 'The path to googletest sources', os.environ.get('GTEST_DIR', default_gtest_dir), PathVariable.PathIsDir))
vars.Update(env)
Help(vars.GenerateHelpText(env))

if env.has_key('GTEST_DIR') and os.path.exists(os.path.join(env['GTEST_DIR'], 'include', 'gtest', 'gtest.h')) and env['build_unit_tests']:
    gtest_env = env.Clone();
    gtest_dir = gtest_env['GTEST_DIR']
    vars = Variables();
    vars.AddVariables(('GTEST_HOME', '', gtest_dir))
    vars.Update(gtest_env)

    if gtest_dir == '/usr':
        gtest_src_base = os.path.join(gtest_dir, 'src', 'gtest')
    else:
        gtest_src_base = gtest_dir

    if env['TARG'] == 'win32':
        # gTest needs different CPPDEFINES as compared to AllJoyn TCL.
        gtest_env.Append(CPPDEFINES = ['WIN32', '_LIB'])
        gtest_env.Append(CXXFLAGS = ['/wd4355', '/vmm', '/vmg', '/MDd', '/Od', '/Gd', '/Ob1', '/EHsc'])

        # Microsoft Visual Studio 2012 has a different _VARIADIC_MAX default value.
        # See: http://blogs.msdn.com/b/vcblog/archive/2011/09/12/10209291.aspx
        if(env['MSVC_VERSION'] == '11.0' or env['MSVC_VERSION'] == '11.0Exp'):
            gtest_env.Append(CPPDEFINES = ['_VARIADIC_MAX=10'])

    # We compile with no rtti, no exceptions and no threads
    gtest_env.Append(CPPDEFINES = { 'GTEST_HAS_RTTI': '0',
                                    'GTEST_HAS_EXCEPTIONS': '0',
                                    'GTEST_HAS_PTHREAD': '0' })
    # we replace AllJoyn's include CPPPATH options.
    gtest_env.Replace(CPPPATH = [ gtest_src_base ])
    if gtest_dir != '/usr':
        gtest_env.Append(CPPPATH = [ gtest_env.Dir('$GTEST_DIR/include') ])

    gtest_obj = gtest_env.StaticObject(target = 'gtest-all', source = [ '%s/src/gtest-all.cc' % gtest_src_base ])
    gtest_env.StaticLibrary(target = 'gtest', source = gtest_obj)

    test_src = env.Glob('*.cc')

    unittest_env = env.Clone()
    unittest_env.Append(LIBPATH = "#dist/lib")
    unittest_env.Append(LIBS = "ajtcl")

    gtest_dir = unittest_env['GTEST_DIR']
    if gtest_dir != '/usr':
        unittest_env.Append(CPPPATH = [gtest_dir + '/include'])

    unittest_env.Append(CPPDEFINES = { 'GTEST_HAS_RTTI': '0',
                                       'GTEST_HAS_EXCEPTIONS': '0',
                                       'GTEST_HAS_PTHREAD': '0' })

    #gtest library file is placed in the same directory
    unittest_env.Append(LIBPATH = [Dir('.')])
    unittest_env.Prepend(LIBS = ['gtest'])

    objs = [ unittest_env.Object(test_src) ]

    if env['TARG'] == 'win32':
        unittest_env.Append(CXXFLAGS = ['/wd4355', '/vmm', '/vmg', '/MDd', '/Od', '/Gd', '/Ob1', '/EHsc'])
        unittest_env.Append(LFLAGS=['/NODEFAULTLIB:msvcrt.lib'])
        unittest_env.Append(LINKFLAGS=['/NODEFAULTLIB:msvcrt.lib'])
        unittest_env.Append(CXXFLAGS = ['/wd4355', '/vmm', '/vmg', '/MDd', '/Od', '/Gd', '/Ob1', '/EHsc'])

    unittest_prog = unittest_env.Program('ajtcltest', objs)
    unittest_env.Install('#dist/test', unittest_prog)
