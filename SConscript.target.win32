import os

Import('env')

# Target specific SCons command line variables
default_msvc_version = os.environ.get('AJ_MSVC_VERSION', '12.0')
supported_msvc_versions = [ '8.0', '9.0', '10.0', '11.0', '11.0Exp', '12.0', '12.0Exp' ]
vars = Variables()
vars.Add(EnumVariable('MSVC_VERSION', 'MSVC compiler version - Windows',                        default_msvc_version, allowed_values = supported_msvc_versions))
vars.Add(BoolVariable('FORCE32',      'Force building 32 bit on 64 bit architecture',           os.environ.get('AJ_FORCE32', False)))
vars.Add(BoolVariable('NO_AUTH',      "Compile in authentication mechanism's to the code base", os.environ.get('AJ_NO_AUTH', False)))
vars.Update(env)
Help(vars.GenerateHelpText(env))

# Platform libraries
env.Append(LIBS = ['advapi32'])

# Compiler flags
env.Append(CFLAGS = [ '/J', '/W3', '/nologo' ])
env.Append(CPPDEFINES = [ '_CRT_SECURE_NO_WARNINGS', 'AJ_MAIN' ])
if env['FORCE32']:
    env['TARGET_ARCH'] = 'x86'
if env['NO_AUTH']:
    env.Append(CPPDEFINES = [ 'NO_SECURITY' ])

# Debug/Release Variants
if env['VARIANT'] == 'debug':
    env.Append(CFLAGS = [ '/Zi', '/Od', '/MDd' ])
    env.Append(CPPDEFINES = [ '_DEBUG' ])
    env.Append(LINKFLAGS = [ '/debug' ])
else:
    env.Append(CFLAGS = [ '/Gy', '/O1', '/GF', '/MD' ])
    env.Append(LINKFLAGS = [ '/opt:ref', '/NODEFAULTLIB:libcmt.lib' ])

#env['build_shared'] = True
env['connectivity_options'] = [ 'tcp', 'ardp' ]
