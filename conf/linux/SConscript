# Copyright (c) 2010 - 2013, AllSeen Alliance. All rights reserved.
#
#    Permission to use, copy, modify, and/or distribute this software for any
#    purpose with or without fee is hereby granted, provided that the above
#    copyright notice and this permission notice appear in all copies.
#
#    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# 

import os
Import('env')
import platform

if os.environ.has_key('CROSS_PREFIX'):
    env.Replace(CC = os.environ['CROSS_PREFIX'] + 'gcc')
    env.Replace(CXX = os.environ['CROSS_PREFIX'] + 'g++')
    env.Replace(LINK = os.environ['CROSS_PREFIX'] + 'gcc')
    env.Replace(AR = os.environ['CROSS_PREFIX'] + 'ar')
    env['ENV']['STAGING_DIR'] = os.environ.get('STAGING_DIR', '')

if os.environ.has_key('CROSS_PATH'):
    env['ENV']['PATH'] = ':'.join([ os.environ['CROSS_PATH'], env['ENV']['PATH'] ] )

if os.environ.has_key('CROSS_CFLAGS'):
    env.Append(CFLAGS=os.environ['CROSS_CFLAGS'].split())

if os.environ.has_key('CROSS_LINKFLAGS'):
    env.Append(LINKFLAGS=os.environ['CROSS_LINKFLAGS'].split())

env['libs'] = ['rt', 'crypto', 'pthread']
env.Append(CFLAGS=['-Wall',
                   '-pipe',
                   '-static',
                   '-funsigned-char',
                   '-Wpointer-sign',
                   '-Wimplicit-function-declaration',
                   '-fno-strict-aliasing'])
if env['VARIANT'] == 'debug':
    env.Append(CFLAGS='-g')
else:
    env.Append(CPPDEFINES=['NDEBUG'])
    env.Append(CFLAGS='-Os')
    env.Append(LINKFLAGS='-s')

if platform.machine() == 'x86_64' and env['CPU'] == 'x86':
    env.Append(CFLAGS='-m32')
    env.Append(LINKFLAGS='-m32')

# Set-up the environment for Linux
# To compile, sources need access to include files
env.Append(CPPPATH = [env['includes']])

# Win/Linux programs need libs to link
env.Append(LIBS = [env['libs']])

# Win/Linux programs need their own 'main' function
env.Append(CPPDEFINES = ['AJ_MAIN', env['AUTH_DEFINE']])

# Produce shared libraries for these platforms
srcs = env['aj_srcs'] + env['aj_targ_srcs']

env.SharedLibrary('$DISTDIR/lib/ajtcl', srcs)
env.StaticLibrary('$DISTDIR/lib/ajtcl_st', srcs)

# Build objects for the target-specific sources and AllJoyn Thin Client sources
env['aj_obj'] = env.StaticObject(env['aj_srcs'] + env['aj_targ_srcs'])
env['aj_shobj'] = env.SharedObject(env['aj_srcs'] + env['aj_targ_srcs'])
env.StaticLibrary('$DISTDIR/lib/ajtcl', env['aj_obj'])
env.SharedLibrary('$DISTDIR/lib/ajtcl', env['aj_shobj'])
