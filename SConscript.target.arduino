# Copyright AllSeen Alliance. All rights reserved.
#
#    Permission to use, copy, modify, and/or distribute this software for any
#    purpose with or without fee is hereby granted, provided that the above
#    copyright notice and this permission notice appear in all copies.
#
#    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

Import('env')

# Arduino does not build binaries; just sets up for inclusion in Arduino IDE
env['build'] = False

arduinoLibDir = '#dist/arduino_due/libraries/AllJoyn/'

#######################################################
# Install source files
#######################################################
# Install the .c files as .cpp files for the Arduino IDE to consume.
srcs = []
srcs.extend(Glob('src/*.c'))
srcs.extend(Glob('src/nvram/*.c'))
srcs.extend(Glob('src/target/arduino/*.c'))
srcs.extend(Glob('src/crypto/*.c'))
srcs.extend(Glob('src/external/sha2/*.c'))

env.InstallAs([ File(arduinoLibDir + 'src/'+ f.name.replace('.c' , '.cpp')) for f in srcs ], srcs)

#######################################################
# Install arduino library
#######################################################
env.Install(arduinoLibDir, env.Glob('src/target/$TARG/library.properties'))


#######################################################
# Install header files
#######################################################
env.Install(arduinoLibDir + 'src/ajtcl', env.Glob('inc/*.h'))
# Need to force a dpendency here because SCons can't follow nested
# #include dependencies otherwise
env.Depends('#build/$VARIANT', '#dist/include')

# Install service headers
env.Install(arduinoLibDir + 'src/ajtcl/services', env.Glob('services/common/inc/*.h'))
env.Install(arduinoLibDir + 'src/ajtcl/services', env.Glob('services/config/inc/*.h'))

# Install the related header files as well.
env.Install(arduinoLibDir + 'src', Glob('inc/ajtcl/*.h'))
env.Install(arduinoLibDir + 'src', Glob('src/*.h'))
env.Install(arduinoLibDir + 'src', Glob('src/target/arduino/*.h'))
env.Install(arduinoLibDir + 'src', Glob('src/crypto/*.h'))
env.Install(arduinoLibDir + 'src', Glob('src/external/sha2/*.h'))

# Install scpecific files
env.Install(arduinoLibDir + 'src', env.Glob('inc/AllJoyn.h'))
env.Install(arduinoLibDir + 'src/ajtcl', env.Glob('src/target/$TARG/aj_target.h'))


#######################################################
# Install arduino examples
#######################################################
# Install the Arduino specific examples into their source
env.Install(Dir(arduinoLibDir).abspath, Dir('src/target/arduino/examples/'))


# Install the generic .c sample and test programs from the sample and
# test directories into their destination while changing the
# extension.

# Install the test programs
tests = [
    'svclite',
    'clientlite',
    'siglite',
    'bastress2',
    'mutter',
    'sessions',
    'aestest'
]
for test in tests:
    tdir = arduinoLibDir + 'tests/AJ_' + test
    env.Install(tdir, 'src/target/arduino/tests/AJ_' + test + '/AJ_' + test + '.ino')
    env.InstallAs(tdir + '/' + test + '.cpp', 'test/' + test + '.c')


# Install basic samples
basicsamples = [
    'basic_service',
    'basic_client',
    'signal_service',
    'signalConsumer_client'
]
for sample in basicsamples:
    sdir = arduinoLibDir + 'samples/AJ_' + sample
    env.Install(sdir, 'src/target/arduino/samples/AJ_' + sample + '/AJ_' + sample + '.ino')
    env.InstallAs(sdir + '/' + sample + '.cpp', 'samples/basic/' + sample + '.c')


# Install secure samples
securesamples = [
    'SecureClient',
    'SecureService'
]
for sample in securesamples:
    sdir = arduinoLibDir + 'samples/AJ_' + sample
    env.Install(sdir, 'src/target/arduino/samples/AJ_' + sample + '/AJ_' + sample + '.ino')

	
# Install secure samples with Elliptic Curve Diffie-Hellman Ephemeral (ECDHE) based auth
securesamples = [
    'SecureClientECDHE',
    'SecureServiceECDHE'
]
for sample in securesamples:
    sdir = arduinoLibDir + 'samples/AJ_' + sample
    env.Install(sdir, 'src/target/arduino/samples/AJ_' + sample + '/AJ_' + sample + '.ino')
    env.InstallAs(sdir + '/' + sample + '.cpp', 'samples/secure/' + sample + '.c')

	